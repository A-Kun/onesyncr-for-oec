
74/100

CSCC01 Deliverable 4 Marking Guide
-----------------------------------

Project Management:  __________ (20%) 19

  Release plan:  2.5/2.5
    - each release corresponds to end of Sprint
    - project fully laid out:
      for each release date, list of user stories to implement
    - project velocity specified and used
    - highest priority user stories first modulo dependencies
    - reasonable goals for each release
  
  Product Backlog: 2.5/2.5
    - user stories follow the correct format.
    - user stories, together, reflect all the user requirements (from
      all personas).
    - user stories correspond to actual requirements (no "invented"
      features).
    - user stories contain enough information for devs to estimate how
      long it would take to implement it.
    - each user story addresses one specific requirement (no "world
      peace" stories).

  Sprint Backlog(s): 2.5/2.5
     - user stories taken from the Product Backlog
     - estimated costs
     - estimated values

  Sprint Plan(s): 2.5/2.5
    - user stories divided into tasks when appropriate. good
    - each Sprint Plan contains all the necessary information:
        who is working on which task on which day. Would have taken marks off here
    - sum of costs of user stories in the sprint = project velocity
    - good planning decisions, you've proven you're able to execute your plans, good job.

  Use of Task Board: 2.5/2.5
    - correct format of task boards
    - snapshots in the begginning and end of each Sprint are provided
    
  Use of Burndown Charts: 2.5/2.5
    - snapshots in the begginning and end of each Sprint are provided
    - correctness of burndown charts

  Use of Repo: 1.5/2.5 -1, should manage dependencies with pip.
      (including good use of branching from now on!)

  Use of communication tools: 2.5/2.5
     - evidence of using communication tools of their choice effectively


Design and Implementation:  __________ (30%) 25

   System Design: 15/15, well done, it'd been nice to have a diagram as opposed to just a description.
      - good modular design
      - general and easy to extend
      - it is clear how the current implementation is going to be
        extended into an application that satisfies the client's needs

   Implementation: 10/15, -5 website was accessible, had errors when triggering check for update (probably because i haven't forked the repo)
     - 0 marks if it doesn't run
     - most of the features are either fully implemented of nearly implemented
     - quality and maturity of code


Verification and Validation:  __________ (25%) 8

   - quality of unit tests: 1/5, python2 was used instead of python3, didn't use a unit test framework, print statements don't really count.
         - good coverage
         - no redundancy
   - code review activities and outcomes: 7/10
         - each review follows a checklist (not necessarily the example one, but the same checklist for all) [good]
         - each review is thorough -3, could have stated line by line what was good and bad
         - evidence of addressing the outcomes of the review good.
         - the video demonstrates an effective process used for the review/collection meeting good.
   - validation activities and outcomes: 0/10
         - evidence of feedback from the user
         - evidence of addressing feedback from the user


Report: __________ (15%) 13

  - well-presented, is easy to read and to navigate /3.75
  - spelling and grammar /3.75 -1, small grammatical errors
  - looks professional /3.75
  - quality of the README file /3.75 -1, didn't state that i needed to fork hannos repo


Interview: ________ (10%) 9
CSC C01 - Deliverable 4 Interview Record

All members present and on time: yes

1) Team Members' Roles [2]:

 Ask for a volunteer to explain the role of each team member as they
 worked on this phase of the project.

Team member:

Notes:
Satisfying

2) Checkout, build, run [2]:

 Ask for a volunteer to checkout, configure, build, and run the
 application.

 Team member:

Notes:
Statisfying

3) Demo [2]:

 Ask for a volunteer to demo the application.

 Team member:

Notes:
-1 hickups in demo
But webapp looks good, code runs, collects github login 

4) Project Management [2]:

  Ask for a volunteer to explain any changes to the sprint backlog/plan

  Team member:
Rose

Notes:
Satisfying

5) Code reviews [2]:

  Ask for a volunteer to go over a code review summary for the review
  of your choice.

  Team member: Andrew

Notes:
Satisfying

